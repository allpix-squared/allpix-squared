variables:
    EOS_PATH: "/eos/project/a/allpix-squared/www/"
    DOCKER_FILE: etc/docker/Dockerfile

stages:
    - compilation
    - testing
    - formatting
    - performance
    - documentation
    - packaging
    - deployment

#######################
# Compilation targets #
#######################

# Hidden key to define the default compile job:
.compile:
    stage: compilation
    needs: []
    tags:
        - docker
    script:
        - mkdir build
        - cd build
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR -DLCIO_DIR=$LCIO_DIR ..
        - ninja -k0
        - ninja install
    artifacts:
        paths:
            - build
            - bin
            - lib
        expire_in: 24 hour

cmp:slc6-gcc:
    extends: .compile
    image: gitlab-registry.cern.ch/sft/docker/slc6:latest
    before_script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

# Ensure that our LXPLUS setup script is functional:
cmp:lxplus-gcc:
    extends: .compile
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - export COMPILER_TYPE="gcc"
        - source etc/scripts/setup_lxplus.sh
    script:
        - mkdir build
        - cd build
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=RELEASE -DLCIO_DIR=$LCIO_DIR ..
        - ninja -k0
        - ninja install

cmp:cc7-docker:
    extends: .compile
    image:
        name: gitlab-registry.cern.ch/allpix-squared/allpix-squared/allpix-squared-deps:latest
        entrypoint: [""]
    before_script:
        - source scl_source enable devtoolset-8 || echo " "
    script:
        - mkdir build
        - cd build
        - cmake3 -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_ALL_MODULES=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR ..
        - make
        - make install

cmp:cc7-gcc:
    extends: .compile
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

cmp:cc7-llvm:
    extends: .compile
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab/ci/init_x86_64.sh

cmp:mac1015-clang:
    extends: .compile
    tags:
        - mac
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh
    script:
        - mkdir build
        - cd build
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=RELEASE -DLCIO_DIR=$LCIO_DIR -DCMAKE_USE_RELATIVE_PATHS=TRUE ..
        - ninja -k0
        - ninja install


############################
# Format and Lint Checking #
############################

# Hidden key to define the basis for linting and formatting:
.format:
    stage: formatting
    tags:
        - docker
    before_script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab/ci/init_x86_64.sh

fmt:cc7-llvm-format:
    extends: .format
    needs: []
    dependencies: []
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    script:
        - mkdir -p build
        - cd build/
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=RELEASE -DLCIO_DIR=$LCIO_DIR ..
        - ninja check-format

fmt:cc7-llvm-lint:
    extends: .format
    needs: []
    dependencies: []
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    script:
        - mkdir -p build
        - cd build/
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=RELEASE -DLCIO_DIR=$LCIO_DIR ..
        - ninja check-lint


fmt:coverage:
    extends: .format
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    needs: []
    dependencies: []
    before_script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab/ci/init_x86_64.sh
        - export PATH=$PATH:/home/sftnight/.local/bin
    script:
        - source .gitlab/ci/load_deps.sh
        - pip install --trusted-host=pypi.org --user gcovr
        - mkdir build
        - cd build
        - cmake -GNinja -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON -DLCIO_DIR=$LCIO_DIR ..
        - ninja -k0
        - ninja install
        - ninja coverage_gcovr

fmt:codespell:
    extends: .format
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    needs: []
    dependencies: []
    script:
        - source .gitlab/ci/load_deps.sh
        - export PATH=~/.local/bin:$PATH
        - pip install --trusted-host=pypi.org --user codespell
        - codespell --ignore-words .gitlab/ci/codespell_ignored_words.txt --quiet-level 2 --skip ".git,.gitlab,cmake,3rdparty"

fmt:coverity:
    extends: .format
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    needs: []
    dependencies: []
    only:
        - coverity
        - schedules
    variables:
        SCHEDULE_TAG: "coverity"
    script:
        - wget --quiet https://scan.coverity.com/download/linux64 --post-data "token=$COVERITY_SCAN_TOKEN&project=$COVERITY_SCAN_PROJECT_NAME" -O /tmp/cov-analysis-linux64.tgz
        - mkdir build
        - cd build
        - tar xfz /tmp/cov-analysis-linux64.tgz
        - cmake -DCMAKE_CXX_FLAGS="-Werror" -DBUILD_LCIOWriter=ON -DCMAKE_BUILD_TYPE=RELEASE -DROOT_DIR=$ROOTSYS -DEigen3_DIR=$Eigen3_DIR -DLCIO_DIR=$LCIO_DIR ..
        - cov-analysis-linux64-*/bin/cov-build --dir cov-int make
        - tar cfz cov-int.tar.gz cov-int
        - curl --form token=$COVERITY_SCAN_TOKEN --form email=$GITLAB_USER_EMAIL --form file=@cov-int.tar.gz --form version="`git describe --tags`" --form description="`git describe --tags` / $CI_COMMIT_TITLE / $CI_COMMIT_REF_NAME:$CI_PIPELINE_ID " https://scan.coverity.com/builds?project=$COVERITY_SCAN_PROJECT_NAME

##############
# Unit tests #
##############

.test:
    stage: testing
    tags:
        - docker

.testmod:
    extends: .test
    script:
        - cd build/
        - ctest -R test_modules --output-on-failure -j4

.testcore:
    extends: .test
    script:
        - cd build/
        - ctest -R test_core --output-on-failure -j4


# Test if examples still execute fine:

examples:
    extends: .test
    needs:
        - job: cmp:cc7-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh
    script:
        - cd build/
        - ctest -R examples --output-on-failure -j4

# SLC 6

mod:slc6-gcc:
    extends: .testmod
    needs:
        - job: cmp:slc6-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/slc6:latest
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

core:slc6-gcc:
    extends: .testcore
    needs:
        - job: cmp:slc6-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/slc6:latest
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

mod:lxplus-gcc:
    extends: .testmod
    needs:
        - job: cmp:lxplus-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - source etc/scripts/setup_lxplus.sh

core:lxplus-gcc:
    extends: .testcore
    needs:
        - job: cmp:lxplus-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - source etc/scripts/setup_lxplus.sh

# CentOS 7
mod:cc7-docker:
    extends: .testmod
    needs:
        - job: cmp:cc7-docker
          artifacts: true
    image:
        name: gitlab-registry.cern.ch/allpix-squared/allpix-squared/allpix-squared-deps:latest
        entrypoint: [""]
    before_script:
        - source scl_source enable devtoolset-7 || echo " "

core:cc7-docker:
    extends: .testcore
    needs:
        - job: cmp:cc7-docker
          artifacts: true
    image:
        name: gitlab-registry.cern.ch/allpix-squared/allpix-squared/allpix-squared-deps:latest
        entrypoint: [""]
    before_script:
        - source scl_source enable devtoolset-8 || echo " "

mod:cc7-gcc:
    extends: .testmod
    needs:
        - job: cmp:cc7-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

core:cc7-gcc:
    extends: .testcore
    needs:
        - job: cmp:cc7-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

mod:cc7-llvm:
    extends: .testmod
    needs:
        - job: cmp:cc7-llvm
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

core:cc7-llvm:
    extends: .testcore
    needs:
        - job: cmp:cc7-llvm
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh


# Mac OS X

mod:mac1015-clang:
    extends: .testmod
    tags:
        - mac
    needs:
        - job: cmp:mac1015-clang
          artifacts: true
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

core:mac1015-clang:
    extends: .testcore
    tags:
        - mac
    needs:
        - job: cmp:mac1015-clang
          artifacts: true
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh


#####################
# Performance tests #
#####################

# Performance tests are only run on Mac OS X and on a native CentOS7 installation. Otherwise we have no control
# about how many CI jobs are performed on the same machine in parallel via the hypervisor.

.testperf:
    stage: performance
    tags:
        - benchmark
    script:
        - cd build/
        - ctest -R test_performance --output-on-failure
    allow_failure: true
    retry: 1

# CentOS7

perf:cc7-gcc:
    extends: .testperf
    needs:
        - job: cmp:cc7-gcc
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

# Temporarily hide LLVM job, have to find out why this is so slow.
.perf:cc7-llvm:
    extends: .testperf
    needs:
        - job: cmp:cc7-llvm
          artifacts: true
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    before_script:
        - export COMPILER_TYPE="llvm"
        - source .gitlab/ci/init_x86_64.sh

# Mac OS X
# Temporarily disable Mac OS X performance until tests are adapted to actual performance
.perf:mac1015-clang:
    extends: .testperf
    needs:
        - job: cmp:mac1015-clang
          artifacts: true
    before_script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh


#############################
# Documentation Compilation #
#############################

.doc:
    stage: documentation
    tags:
        - docker
    artifacts:
        paths:
            - public
        expire_in: 24 hour


# Compile Doxygen reference
cmp:doxygen:
    extends: .doc
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    needs: []
    dependencies: []
    script:
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh
        - mkdir -p public/usermanual
        - mkdir build
        - cd build
        - cmake -DBUILD_DOCS_ONLY=ON ..
        - make Allpix-reference
        - mv reference/html ../public/reference

# Compile LaTeX user manual:
cmp:usermanual:
    extends: .doc
    image: gitlab-registry.cern.ch/clicdp/publications/templates/custom_ci_worker:fedora-latex-latest
    needs: []
    dependencies: []
    script:
        - mkdir -p public/usermanual
        - mkdir build
        - cd build
        - cmake -DBUILD_DOCS_ONLY=ON ..
        - make pdf
        - make html
        - mv usermanual/*.html ../public/usermanual
        - mv usermanual/*.css ../public/usermanual
        - mv usermanual/logo.png ../public/usermanual
        - mv usermanual/allpix-manual.pdf ../public/usermanual
        - mkdir -p ../public/usermanual/usermanual/
        - mkdir -p ../public/usermanual/usermanual/html/
        - mv usermanual/usermanual/html/css ../public/usermanual/usermanual/html/
        - mv usermanual/usermanual/html/js ../public/usermanual/usermanual/html/
        - mv usermanual/usermanual/figures ../public/usermanual/usermanual/

################################
# Packaging of Binary Tarballs #
################################

.pack:
    stage: packaging
    tags:
        - docker
    only:
        - tags@allpix-squared/allpix-squared
        - schedules@allpix-squared/allpix-squared
    script:
        - mkdir -p public/releases
        - cd build
        - cmake -GNinja -DCMAKE_SKIP_RPATH=ON -DCMAKE_INSTALL_PREFIX=/tmp ..
        - ninja package
        - mv *.tar.gz ../public/releases
    artifacts:
        paths:
            - public
        expire_in: 24 hour

pkg:slc6-gcc:
    extends: .pack
    image: gitlab-registry.cern.ch/sft/docker/slc6:latest
    needs:
        - job: cmp:slc6-gcc
          artifacts: true
    before_script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh

pkg:cc7-gcc:
    extends: .pack
    image: gitlab-registry.cern.ch/sft/docker/centos7:latest
    needs:
        - job: cmp:cc7-gcc
          artifacts: true
    before_script:
        - export COMPILER_TYPE="gcc"
        - source .gitlab/ci/init_x86_64.sh
        - source .gitlab/ci/load_deps.sh


############################
# Documentation Deployment #
############################

# Automatically deploy documentation to the website
# Deployment job only executed for new tag pushs, not for every commit.
deploy-documentation:
    stage: deployment
    tags:
      - docker
    variables:
        GIT_STRATEGY: none
    # Only run for new tags:
    only:
        - tags@allpix-squared/allpix-squared
    dependencies:
        - cmp:usermanual
        - cmp:doxygen
    # Docker image with tools to deploy to EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []

deploy-eos:
    stage: deployment
    tags:
      - docker
    variables:
        GIT_STRATEGY: none
    # Only run for new tags:
    only:
        - tags@allpix-squared/allpix-squared
        - schedules@allpix-squared/allpix-squared
    dependencies:
        - pkg:cc7-gcc
        - pkg:slc6-gcc
    # Docker image with tools to deploy to EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []

deploy-cvmfs:
    stage: deployment
    dependencies:
        - pkg:cc7-gcc
        - pkg:slc6-gcc
    tags:
        - cvmfs-deploy
    only:
        - tags@allpix-squared/allpix-squared
        - schedules@allpix-squared/allpix-squared
    script:
        - ./.gitlab/ci/download_artifacts.py $API_TOKEN $CI_PROJECT_ID $CI_PIPELINE_ID
        - export RUNNER_LOCATION=$(pwd)
        - if [ -z ${CI_COMMIT_TAG} ]; then export BUILD_PATH='latest'; else export BUILD_PATH=${CI_COMMIT_TAG}; fi
        - sudo -u cvclicdp -i $RUNNER_LOCATION/.gitlab/ci/gitlab_deploy.sh $RUNNER_LOCATION $BUILD_PATH
        - rm -f allpix-squared-*.tar.gz
    retry: 1

deploy-docker-latest:
    stage: deployment
    tags:
        - docker-image-build
    dependencies: []
    only:
        - schedules@allpix-squared/allpix-squared
    script:
        - "echo" # unused but this line is required by GitLab CI
    variables:
        TO: gitlab-registry.cern.ch/allpix-squared/allpix-squared

deploy-docker-tag:
    stage: deployment
    tags:
        - docker-image-build
    dependencies: []
    only:
        - tags@allpix-squared/allpix-squared
    script:
        - "echo" # unused but this line is required by GitLab CI
    variables:
        TO: gitlab-registry.cern.ch/allpix-squared/allpix-squared:${CI_COMMIT_TAG}
